//James Bardunias
//Preston Lomenzo

using System;
using System.Collections.Generic;
using System.Text;
using Sys = Cosmos.System;

namespace CosmosKernel1
{
    public class Kernel : Sys.Kernel
    {
        const int DIR_SIZE = 100;
        String[] filenames;
        String[] filedata;
        String[] fileext;
        String[] filedate;
        int[] filesize;
        String[] variable;
        int[] variableValue;
        String[] concatVariable;
        String[] concatValue;
        bool stringConcat;
        int numFiles;
	char[] postFix;
	int[] arithmeticStack;
	String[] inputArray;
	int stackTop;
	string postfix; 
	int ndx;
	string test;
	int interAns;
	int inputArrayLength;

        protected override void BeforeRun()
        {
            filenames = new String[DIR_SIZE];
            filedata = new String[DIR_SIZE];
            fileext = new String[DIR_SIZE];
            filedate = new String[DIR_SIZE];
            filesize = new int[DIR_SIZE];
            variable = new String[DIR_SIZE];
            variableValue = new int[DIR_SIZE];
            concatVariable = new String[DIR_SIZE];
            concatValue = new String[DIR_SIZE];
            numFiles = 0;
            Console.WriteLine("Cosmos booted successfully. \nType 'help' to see available commands.");
        }
	
	//******************************** CREATES POSTFIX STACK ****************************************************
        public void push(char c)
        { postFix[++stackTop] = c; }

        public char pop()
        { return postFix[stackTop--]; }

        public bool isEmpty()
        { return (stackTop == -1); }

        //******************************* CREATES ARITHMETIC STACK*************************************************
        public void pushAs(int i)
        { arithmeticStack[++stackTop] = i; }

        public int popAs()
        { return arithmeticStack[stackTop--]; }

        public bool isEmptyAs()
        { return (stackTop == -1); }

	        //******************************** CREATES POSTFIX CONVERSION ********************************************
        public void ConvertInfix(String input)
        {
            postFix = new char[input.Length];
            inputArray = new String[inputArrayLength];
            stackTop = -1;
            postfix = "";
            ndx = -1;
            test = "";

            for(int x = 0; x < input.Length; x++)
            {
                char ch = input[x];
                switch(ch)
                { 
                    case '|':
                        inputArray[++ndx] = postfix;
                        postfix = "";
                        operators(ch, 1);
                        break;

                    case '^':
                        inputArray[++ndx] = postfix;
                        postfix = "";
                        operators(ch, 2);
                        break;

                    case '&':
                        inputArray[++ndx] = postfix;
                        postfix = "";
                        operators(ch, 3);
                        break;

                    case '+': 
                    case '-':
                        if (postfix != "")
                        {
                            inputArray[++ndx] = postfix;
                            postfix = "";
                        }
                        operators(ch, 4);
                        break; 

                    case '*':
                    case '/':
                        if (postfix != "")
                        {
                            inputArray[++ndx] = postfix;
                            postfix = "";
                        }
                        operators(ch, 5);
                        break;

                    case '(':
                        push(ch);
                        break;
                    case ')':
                        if (postfix != "")
                        {
                            inputArray[++ndx] = postfix;
                            postfix = "";
                        }
                        paren(ch);
                        break;

                    default:
                        postfix += ch.ToString();
                        if (x == input.Length -1 && input[x] != ')')
                            inputArray[++ndx] = postfix;
                        test += postfix;
                        break;
                }
            }
            while(!isEmpty())
            {
                string temp = pop().ToString();
                inputArray[++ndx] = temp;
                test += temp;
            }
 
        }
        
        // Process the operator 
        public void operators(char op, int prec1) 
        {
            while(isEmpty() == false)
            {
                char operTop = pop(); 

                if ( operTop == '(')
                {
                    push(operTop);
                    break;
                }
                else
                {
                    int prec2;

                    if (operTop == '|')
                        prec2 = 1;
                    if (operTop == '^')
                        prec2 = 2;
                    if (operTop == '&')
                        prec2 = 3;
                    if (operTop == '+' || operTop == '-')
                        prec2 = 4;
                    else
                        prec2 = 5;
                    if (prec2 < prec1)
                    {
                        push(operTop);
                        break;
                    }
                    else
                    {
                        string temp = operTop.ToString();
                        inputArray[++ndx] = temp;
                        test += temp;
                    }
                }
            }
            push(op); 
        }

        // Process the parenthesis 
        public void paren(char ch)
        {
            while ( !isEmpty())
            {
                char chx = pop();
                if (chx == '(')
                    break;
                else
                {
                    string temp = chx.ToString();
                    inputArray[++ndx] = temp;
                    test += temp;
                }
            }
        }

	//***************************************** ARITHMETIC ON POSTFIX **********************************
        public void convertPost()
        {
            
            stackTop = -1;
            arithmeticStack = new int[inputArray.Length];
            int x;
            string ch;
            int num1;
            int num2;  
            interAns = 0;
            
            for (x = 0; x < inputArray.Length; x++)  
            {
               ch = inputArray[x];  
               
               if (ch != "+" && ch != "-" && ch != "*" && ch != "/" && ch != "&" && ch != "|" && ch != "^")
                   pushAs(int.Parse(ch.ToString()));

               else
               {
                   num2 = popAs();
                   num1 = popAs();
                   switch (ch[0])
                   {
                       case '+':
                           interAns = num1 + num2;
                           break;
                       case '-':
                           interAns = num1 - num2;
                           break;
                       case '*':
                           interAns = num1 * num2;
                           break;
                       case '/':
                           interAns = num1 / num2;
                           break;
                       case '&':
                           interAns = num1 & num2;
                           break;
                       case '^':
                           interAns = num1 ^ num2;
                           break;
                       case '|':
                           interAns = num1 | num2;
                           break;
                       default:
                           interAns = 0;
                           break;
                   }
                   pushAs(interAns);
               } 
            }
             
            interAns = popAs(); 
        }


        protected override void Run()
        {
            Console.Write("\n> ");
            Commands(Console.ReadLine());
        }

        private void ComHelp(){
            //should be in alphabetical order
            Console.WriteLine("\t-create <Filename>.<Extension>\tCreates a file and requests input. See -save");
            Console.WriteLine("\t-date\tDisplays current date");
            Console.WriteLine("\t-dir\t Displays directory");
            Console.WriteLine("\t-echo\tEchos input");
            Console.WriteLine("\t-help\tDisplays a list of available commands");
            Console.WriteLine("\t-save\tSaves open file");
            Console.WriteLine("\t-time\tDisplays the current time");
            Console.WriteLine("\t-set\t Set variable to an expression");
            Console.WriteLine("\t-out\t Display variable value");
            Console.WriteLine("\t-run <filename>.bat\t Runs batch file.");
        }

        private void ComTime()
        {
            Console.WriteLine("The current time is: " + Cosmos.Hardware.RTC.Hour + ":" + Cosmos.Hardware.RTC.Minute + ":" + Cosmos.Hardware.RTC.Second);
        }

        private void ComDate()
        {
            var day = "";

            switch (Cosmos.Hardware.RTC.DayOfTheWeek)
            {
                case 0: day = "Sunday";
                    break;
                case 1: day = "Monday";
                    break;
                case 2: day = "Tuesday";
                    break;
                case 3: day = "Wednesday";
                    break;
                case 4: day = "Thursday";
                    break;
                case 5: day = "Friday";
                    break;
                case 6: day = "Saturday";
                    break;
                default:
                    day = "ERROR: Date function malfunction";
                    break;
            }

            Console.WriteLine("The current date is: " + day + " " + Cosmos.Hardware.RTC.Month + "/" + Cosmos.Hardware.RTC.DayOfTheMonth + "/" + Cosmos.Hardware.RTC.Century + Cosmos.Hardware.RTC.Year);

        }

        private void ComRun(String input)
        {
            var fileName = input.Substring(4, 100);
            int index = -1;

            for (int i = 0; i < DIR_SIZE; i++)
            {
                if (filenames[i] != null && fileName == filenames[i] + fileext[i])
                {
                    index = i;
                    break;
                }
            }

            if (index == -1)
                Console.WriteLine("File not found.");
            else
            {
                String data = filedata[index];
                while (data != "")
                {
                    int lineEnd = data.IndexOf('~');
                    String line = data.Substring(0, lineEnd);

                    Console.WriteLine(line);
                    Commands(line); //  <-- Sweet
                    data = data.Substring(lineEnd + 1, 1000);
                }
                Console.WriteLine("*** BATCH COMPLETE ***");
            }
        }

        private void ComEcho(String input)
        {
            Console.WriteLine(input.Substring(5, 100));
        }

        private void ComCreate(String input)
        {
            var fileName = input.Substring(7, 100);

            int runningsize = 0;
            String inputdata = "";
            String fullFileName = input.Substring(7, 100);

            input = Console.ReadLine();
            while (input.ToLower() != "save") //gathering each lines input data
            {
                runningsize += input.Length;
                inputdata += input + "~";
                input = Console.ReadLine();
            }

            int index = -1;

            for (int i = 0; i < DIR_SIZE; i++) //finds first avaible slot for a new file
                if (filenames[i] == null)
                {
                    index = i;
                    break;
                }

            int indexOfDot = fullFileName.LastIndexOf('.', fullFileName.Length - 1, fullFileName.Length - 2);
            filenames[index] = fullFileName.Substring(0, indexOfDot);
            fileext[index] = fullFileName.Substring(indexOfDot, indexOfDot + 10);
            filedate[index] = Cosmos.Hardware.RTC.Month + "/" + Cosmos.Hardware.RTC.DayOfTheMonth + "/" + Cosmos.Hardware.RTC.Century + Cosmos.Hardware.RTC.Year;
            filesize[index] = 20 + (runningsize / 2) * 4; //"In the current implementation at least, strings take up 20+(n/2)*4 bytes"
            filedata[index] = inputdata;
            numFiles++;

            Console.WriteLine("*** File Saved ***");
        }

        private void ComSave()
        {
            Console.WriteLine("ERROR: No open file to save");
        }

        private void ComDir()
        {
            Console.WriteLine("Filename           \tExtension\tDate     \tSize");
            Console.WriteLine("---------------------------------------------------------------------");
            for (int i = 0; i < DIR_SIZE; i++)
            {
                if (filenames[i] == null)
                    continue;

                Console.WriteLine(filenames[i] + "               \t" + fileext[i] + "     \t" + filedate[i] + "\t" + filesize[i] + " b");
            }
        }

        private void ComSet(String input)
        {
            string varName = input.Substring(4, input.IndexOf('=') - 5);
            string tempInput = "";
            stringConcat = false;

            //***************************************
               inputArrayLength = 0; 
                //removes spaces after "= " 
                for (int i = (input.IndexOf('=') + 2); i < input.Length; i++)
                {
                    if (input[i] == '(' || input[i] == ')')
                        inputArrayLength++; 
                    for (int x = 0; x < DIR_SIZE; x++)
                    {    //Checks to see if there is variable 
                        if ((tempInput == concatVariable[x] || tempInput == variable[x])) // dont need if 
                        {
                            if (tempInput == concatVariable[x])
                            {
                                tempInput = concatValue[x];
                                stringConcat = true;
                            }
                            else
                                tempInput = variableValue[x].ToString();
                            break;
                        }
                    }
                    // This determines if there is a string 
                    if (input[i] == '"' || input[i] == ' ' || (input[i] == '+' && stringConcat == true)) // dont need ' '
                    {
                        if (input[i] == '"')
                            stringConcat = true;
                        continue;
                    }
                    tempInput += input[i];
                }
                input = tempInput;
               inputArrayLength = input.Length - inputArrayLength;
                //*******************************************
                if (stringConcat)
                {
                    for (int i = 0; i < DIR_SIZE; i++)
                    {
                        // Resets value is same variable is chosen 
                        if (concatVariable[i] == varName)
                        {
                            concatValue[i] = input;
                            break;
                        }
                        // Places variable and value into 1st empty index
                        else if (concatVariable[i] == null)
                        {
                            concatVariable[i] = varName;
                            concatValue[i] = input;
                            break;
                        }
                    }
                }
            else
            {
                convertInfix(input);
		        convertPost();
                    
                // Finds first avaible slot for a new variable and value
                for (int i = 0; i < DIR_SIZE; i++)
                {
                    // Resets value is same variable is chosen 
                    if (variable[i] == varName)
                    {
                        variableValue[i] = interAns;
                        break;
                    }
                    // Places variable and value into empty into 1st empty index
                    else if (variable[i] == null)
                    {
                        variable[i] = varName;
                        variableValue[i] = interAns;
                        break;
                    }
                }
            }
        }

        private void ComOut(String input)
        {
            // Sets the variable to the the chosen variable
            string varName = input.Substring(4, input.Length);

            if (stringConcat)
            {
                for (int i = 0; i < DIR_SIZE; i++)
                {
                    if (concatVariable[i] == varName)
                    {
                        Console.Write(concatValue[i]);
                        break;
                    }
                }
            }
            else
            {
                // Looks for value and outputs value for selected variable
                for (int i = 0; i < DIR_SIZE; i++)
                {
                    if (variable[i] == varName)
                    {
                        Console.Write(variableValue[i]);
                        break;
                    }
                }
            }
        }

        private void ComUnknown(String input)
        {
            Console.Write("'" + input + "'" + " is not a recognized command");
        }

        private void Commands(String input)
        {
            if (input.ToLower() == "help") //help
                ComHelp();
            else if (input.ToLower() == "time") //time
                ComTime();
            else if (input.ToLower() == "date") //date
                ComDate();
            else if (input.ToLower().Substring(0, 4) == "run ") //run batch
                ComRun(input);
            else if (input.ToLower().Substring(0, 5) == "echo ") //echo
                ComEcho(input);
            else if (input.ToLower().Substring(0, 7) == "create ") //create
                ComCreate(input);
            else if (input.ToLower().Substring(0, 5) == "save ") //save
                ComSave();
            else if (input.ToLower() == "dir") //directory
                ComDir();
            else if (input.ToLower().Substring(0, 4) == "set ") //set
                ComSet(input);
            else if (input.ToLower().Substring(0, 4) == "out ") //out
                ComOut(input);
            else //unknown command
                ComUnknown(input);
        }
    }
}
